From: postbox@lisdatacenter.org
Subject: job 614462 za
Date: April 5, 2019 at 10:54:49 AM CDT
To: fsolt@mac.com

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> library(dplyr) 

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

>  
> ## Define functions 
> gini <- function(df, x) { 
+     df1 <- df[!is.na(df[[x]]), ] 
+     x <- as.vector(df1[[x]]) 
+     weight <- df1$wt 
+      
+     ox <- order(x) 
+     x <- as.vector(x)[ox] 
+     weight <- as.vector(weight)[ox] / sum(weight)  
+     p <- cumsum(weight) 
+     nu <- cumsum(weight * x) 
+     n <- length(nu) 
+     nu <- nu / nu[n] 
+     res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+     return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+     x <- var[order(var)] 
+     y <- wgt[order(var)] 
+     z <- cumsum(y) / sum(y) 
+     cop <- rep(NA, length(split))  
+     for (i in 1:length(cop)) { 
+         cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+     } 
+     return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+     tb <- ifelse(var < botline, botline, var) 
+     tb <- ifelse(tb > topline, topline, tb) 
+     return(tb) 
+ } 
>  
> setups <- function(df) { 
+     botline <- 0 
+     topline10 <- 10 * wNtile(df$dhi, df$hpopwgt, 0.5) 
+      
+     df$disp_sqrt10 <- topBottom(df$dhi, botline, topline10) / (df$nhhmem ^ 0.5) 
+     df$disp_sqrt <- ifelse(df$dhi < botline, botline, df$dhi) / (df$nhhmem ^ 0.5)  
+     df$disp_sqrt_med <- round(df$disp_sqrt / wNtile(df$dhi, df$hpopwgt, 0.5), 1) 
+  
+     df$market_sqrt10 <- topBottom(ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor), botline, topline10) / (df$nhhmem ^ 0.5) 
+     df$market_sqrt <- ifelse(ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor) < 0, botline, ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor)) / (df$nhhmem ^ 0.5) 
+      
+     return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+     data <- data[!is.na(data[[var]]), ] 
+     resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+     r_stat <- lapply(resamples, function(x) gini(x, var)) 
+     std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+     return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars, subset) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] %>% 
> #     filter(eval(parse(text = subset), .)) 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(funs(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+     set.seed(324) 
+     ccs <- c("au", "at", "be", "br", "ca", "cl", "cn", "co", "cz", "dk",  
+              "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is",  
+              "in", "ie", "il", "it", "jp", "lu", "lt", "mx", "nl", "no", "pa",   
+              "py", "pe", "pl", "ro", "ru", "rs", "sk", "si", "za", "kr", "es",   
+              "se", "ch", "tw", "uk", "us", "uy") 
+     cc <- tolower(cc) 
+     if (!cc %in% ccs) { 
+         stop("Please specify a LIS country in iso2c format") 
+     } 
+     last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+     yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:last_year_yy))) 
+      
+     datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+     vars <- c("dhi", "hi", "factor", "hitp", "hc", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+      
+     v <- c("disp_sqrt10", "disp_sqrt") 
+      
+     for (ccyy in datasets) { 
+         cat("") 
+         df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+         if (!class(df)[1] == "try-error") { 
+             mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+             if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+                 df <- setups(df) 
+                 cat(paste(ccyy, 
+                           nrow(df %>%  
+                                    filter(!is.na(disp_sqrt10))), 
+                           nrow(df %>%  
+                                    filter(!is.na(disp_sqrt) & disp_sqrt > 10 * wNtile(df$dhi, df$hpopwgt, 0.5))), 
+                           10 * wNtile(df$dhi, df$hpopwgt, 0.5)), 
+                     sep = "\n") 
+                 print(summary(df %>%  
+                                   pull(disp_sqrt10))) 
+                 print(summary(df %>%  
+                                   filter(disp_sqrt > 10 * wNtile(df$dhi, df$hpopwgt, 0.5)) %>%  
+                                   pull(disp_sqrt))) 
+                 print(c("over", ccyy, df %>% 
+                           filter(disp_sqrt_med > 10) %>%  
+                           pull(disp_sqrt_med) %>%  
+                             sort())) 
+                 for (var in v) { 
+                     if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+                         cat(paste("gini", 
+                                   ccyy,  
+                                   var,  
+                                   gini(df, var), 
+                                   boot_gini_se(df, var, reps = reps), 
+                                   df$grossnet[1], 
+                                   sep = ","), sep = "\n") 
+                     } 
+                 } 
+             } 
+         } 
+     } 
+ } 
>  
> # Call 
> get_ginis("za", reps = 500) 
[1] "Loading dataset za08h..."
za08h 7162 75 240000
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
      0    6028   10966   22462   22931  240000     134 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 240416  277128  323704  395309  426054 1124034 
 [1] "over"  "za08h" "10.3"  "10.3"  "10.4"  "10.5"  "10.5"  "10.6"  "10.6" 
[10] "10.6"  "10.7"  "10.7"  "10.8"  "10.9"  "11"    "11"    "11.1"  "11.1" 
[19] "11.4"  "11.5"  "11.5"  "12"    "12"    "12"    "12.1"  "12.2"  "12.3" 
[28] "12.4"  "12.4"  "12.4"  "12.5"  "12.5"  "12.8"  "13"    "13"    "13.1" 
[37] "13.2"  "13.4"  "13.5"  "13.5"  "13.6"  "13.6"  "13.6"  "13.8"  "13.9" 
[46] "14"    "14.1"  "14.3"  "14.4"  "14.6"  "14.6"  "16.8"  "16.8"  "17.5" 
[55] "17.5"  "17.5"  "17.7"  "17.8"  "18"    "18.6"  "18.7"  "19.9"  "21.2" 
[64] "22.5"  "24.2"  "26.4"  "26.5"  "28.2"  "28.8"  "29.2"  "30.1"  "30.6" 
[73] "31.2"  "35.4"  "46.8"  "46.8" 
gini,za08h,disp_sqrt10,0,0,120
gini,za08h,disp_sqrt,0,0,120
[1] "Loading dataset za10h..."
za10h 6758 28 306000
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
      0    7030   12960   23726   24960  306000      28 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 308592  355321  416096  730066  573443 7368000 
 [1] "over"  "za10h" "10.1"  "10.2"  "10.2"  "10.4"  "11.2"  "11.3"  "11.5" 
[10] "11.6"  "11.8"  "12.3"  "12.4"  "12.6"  "13.2"  "13.6"  "13.6"  "14.3" 
[19] "14.5"  "14.5"  "15"    "16.6"  "18.6"  "19.1"  "21.5"  "22.4"  "24"   
[28] "33.3"  "37.5"  "240.8"
gini,za10h,disp_sqrt10,0,0,120
gini,za10h,disp_sqrt,0,0,120
[1] "Loading dataset za12h..."
za12h 7990 27 372600
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max.     NA's 
     6.4   9445.2  16970.6  29973.7  33154.2 372600.0       50 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 377007  440906  493858  625737  679390 1469694 
 [1] "over"  "za12h" "10.1"  "10.3"  "10.4"  "10.5"  "11.3"  "11.4"  "11.4" 
[10] "12.3"  "12.9"  "12.9"  "12.9"  "13.2"  "13.2"  "13.3"  "14.5"  "14.7" 
[19] "15.4"  "16.5"  "16.7"  "17.1"  "19.3"  "20.9"  "21.6"  "28.6"  "29.6" 
[28] "33"    "39.4" 
gini,za12h,disp_sqrt10,0,0,120
gini,za12h,disp_sqrt,0,0,120
> 
> proc.time()
   user  system elapsed 
 11.183   0.414  12.449 


