From: postbox@lisdatacenter.org
Subject: job 614466 se
Date: April 5, 2019 at 10:56:21 AM CDT
To: fsolt@mac.com

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> library(dplyr) 

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

>  
> ## Define functions 
> gini <- function(df, x) { 
+     df1 <- df[!is.na(df[[x]]), ] 
+     x <- as.vector(df1[[x]]) 
+     weight <- df1$wt 
+      
+     ox <- order(x) 
+     x <- as.vector(x)[ox] 
+     weight <- as.vector(weight)[ox] / sum(weight)  
+     p <- cumsum(weight) 
+     nu <- cumsum(weight * x) 
+     n <- length(nu) 
+     nu <- nu / nu[n] 
+     res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+     return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+     x <- var[order(var)] 
+     y <- wgt[order(var)] 
+     z <- cumsum(y) / sum(y) 
+     cop <- rep(NA, length(split))  
+     for (i in 1:length(cop)) { 
+         cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+     } 
+     return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+     tb <- ifelse(var < botline, botline, var) 
+     tb <- ifelse(tb > topline, topline, tb) 
+     return(tb) 
+ } 
>  
> setups <- function(df) { 
+     botline <- 0 
+     topline10 <- 10 * wNtile(df$dhi, df$hpopwgt, 0.5) 
+      
+     df$disp_sqrt10 <- topBottom(df$dhi, botline, topline10) / (df$nhhmem ^ 0.5) 
+     df$disp_sqrt <- ifelse(df$dhi < botline, botline, df$dhi) / (df$nhhmem ^ 0.5)  
+     df$disp_sqrt_med <- round(df$disp_sqrt / wNtile(df$dhi, df$hpopwgt, 0.5), 1) 
+  
+     df$market_sqrt10 <- topBottom(ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor), botline, topline10) / (df$nhhmem ^ 0.5) 
+     df$market_sqrt <- ifelse(ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor) < 0, botline, ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor)) / (df$nhhmem ^ 0.5) 
+      
+     return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+     data <- data[!is.na(data[[var]]), ] 
+     resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+     r_stat <- lapply(resamples, function(x) gini(x, var)) 
+     std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+     return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars, subset) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] %>% 
> #     filter(eval(parse(text = subset), .)) 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(funs(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+     set.seed(324) 
+     ccs <- c("au", "at", "be", "br", "ca", "cl", "cn", "co", "cz", "dk",  
+              "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is",  
+              "in", "ie", "il", "it", "jp", "lu", "lt", "mx", "nl", "no", "pa",   
+              "py", "pe", "pl", "ro", "ru", "rs", "sk", "si", "za", "kr", "es",   
+              "se", "ch", "tw", "uk", "us", "uy") 
+     cc <- tolower(cc) 
+     if (!cc %in% ccs) { 
+         stop("Please specify a LIS country in iso2c format") 
+     } 
+     last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+     yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:last_year_yy))) 
+      
+     datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+     vars <- c("dhi", "hi", "factor", "hitp", "hc", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+      
+     v <- c("disp_sqrt10", "disp_sqrt") 
+      
+     for (ccyy in datasets) { 
+         cat("") 
+         df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+         if (!class(df)[1] == "try-error") { 
+             mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+             if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+                 df <- setups(df) 
+                 cat(paste(ccyy, 
+                           nrow(df %>%  
+                                    filter(!is.na(disp_sqrt10))), 
+                           nrow(df %>%  
+                                    filter(!is.na(disp_sqrt) & disp_sqrt > 10 * wNtile(df$dhi, df$hpopwgt, 0.5))), 
+                           10 * wNtile(df$dhi, df$hpopwgt, 0.5)), 
+                     sep = "\n") 
+                 print(summary(df %>%  
+                                   pull(disp_sqrt10))) 
+                 print(summary(df %>%  
+                                   filter(disp_sqrt > 10 * wNtile(df$dhi, df$hpopwgt, 0.5)) %>%  
+                                   pull(disp_sqrt))) 
+                 print(c("over", ccyy, df %>% 
+                           filter(disp_sqrt_med > 10) %>%  
+                           pull(disp_sqrt_med) %>%  
+                             sort())) 
+                 for (var in v) { 
+                     if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+                         cat(paste("gini", 
+                                   ccyy,  
+                                   var,  
+                                   gini(df, var), 
+                                   boot_gini_se(df, var, reps = reps), 
+                                   df$grossnet[1], 
+                                   sep = ","), sep = "\n") 
+                     } 
+                 } 
+             } 
+         } 
+     } 
+ } 
>  
> # Call 
> get_ginis("se", reps = 500) 
[1] "Loading dataset se67h..."
se67h 5921 0 137180
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0    6957   10845   11041   14538   79293 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
                                                
[1] "over"  "se67h"
gini,se67h,disp_sqrt10,0,0,110
gini,se67h,disp_sqrt,0,0,110
[1] "Loading dataset se75h..."
se75h 10306 0 305010
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0   19500   26590   28616   35219  215675 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
                                                
[1] "over"  "se75h"
gini,se75h,disp_sqrt10,0,0,110
gini,se75h,disp_sqrt,0,0,110
[1] "Loading dataset se81h..."
se81h 9625 0 556000
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0   32739   45500   48842   62700  296874 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
                                                
[1] "over"  "se81h"
gini,se81h,disp_sqrt10,0,0,110
gini,se81h,disp_sqrt,0,0,110
[1] "Loading dataset se87h..."
se87h 9530 1 848000
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0   56100   76500   78406   97938  616900 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
2511360 2511360 2511360 2511360 2511360 2511360 
[1] "over"  "se87h" "29.6" 
gini,se87h,disp_sqrt10,0,0,110
gini,se87h,disp_sqrt,0,0,110
[1] "Loading dataset se92h..."
se92h 12484 2 1419730
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0   98150  131274  138625  169714 1419730 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
1724510 1765915 1807321 1807321 1848726 1890132 
[1] "over"  "se92h" "12.1"  "13.3" 
gini,se92h,disp_sqrt10,0,0,110
gini,se92h,disp_sqrt,0,0,110
[1] "Loading dataset se95h..."
se95h 16260 2 1468970
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0   99942  127104  136681  164229 1468970 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
1765386 1894567 2023748 2023748 2152929 2282110 
[1] "over"  "se95h" "12"    "15.5" 
gini,se95h,disp_sqrt10,0,0,110
gini,se95h,disp_sqrt,0,0,110
[1] "Loading dataset se00h..."
se00h 14491 4 1813920
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0  107784  148784  163475  198603 1813920 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
2019111 2171194 2265924 3942110 4036840 9217482 
[1] "over"  "se00h" "11.1"  "12.2"  "12.7"  "50.8" 
gini,se00h,disp_sqrt10,0,0,110
gini,se00h,disp_sqrt,0,0,110
[1] "Loading dataset se05h..."
se05h 16268 14 2238610
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0  136444  186588  203805  245495 2238610 
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
  2284476   2630393   3137985  57422319   4656558 758039038 
 [1] "over"   "se05h"  "10.2"   "10.4"   "11.1"   "11.6"   "12.2"   "13.2"  
 [9] "13.4"   "14.6"   "17.8"   "19.3"   "21.3"   "24"     "25.7"   "3386.2"
gini,se05h,disp_sqrt10,0,0,110
gini,se05h,disp_sqrt,0,0,110
> 
> proc.time()
   user  system elapsed 
 38.244   0.595  40.371 


