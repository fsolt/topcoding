From: postbox@lisdatacenter.org
Subject: job 614518 cz
Date: April 5, 2019 at 1:07:36 PM CDT
To: fsolt@mac.com

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> library(dplyr) 

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

>  
> ## Define functions 
> gini <- function(df, x) { 
+     df1 <- df[!is.na(df[[x]]), ] 
+     x <- as.vector(df1[[x]]) 
+     weight <- df1$wt 
+      
+     ox <- order(x) 
+     x <- as.vector(x)[ox] 
+     weight <- as.vector(weight)[ox] / sum(weight)  
+     p <- cumsum(weight) 
+     nu <- cumsum(weight * x) 
+     n <- length(nu) 
+     nu <- nu / nu[n] 
+     res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+     return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+     x <- var[order(var)] 
+     y <- wgt[order(var)] 
+     z <- cumsum(y) / sum(y) 
+     cop <- rep(NA, length(split))  
+     for (i in 1:length(cop)) { 
+         cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+     } 
+     return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+     tb <- ifelse(var < botline, botline, var) 
+     tb <- ifelse(tb > topline, topline, tb) 
+     return(tb) 
+ } 
>  
> setups <- function(df) { 
+     botline <- 0 
+     topline10 <- 10 * wNtile(df$dhi, df$hpopwgt, 0.5) 
+      
+     df$disp_sqrt10 <- topBottom(df$dhi, botline, topline10) / (df$nhhmem ^ 0.5) 
+     df$disp_sqrt <- ifelse(df$dhi < botline, botline, df$dhi) / (df$nhhmem ^ 0.5)  
+     df$disp_sqrt_med <- round(df$disp_sqrt / wNtile(df$dhi, df$hpopwgt, 0.5), 1) 
+  
+     df$market_sqrt10 <- topBottom(ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor), botline, topline10) / (df$nhhmem ^ 0.5) 
+     df$market_sqrt <- ifelse(ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor) < 0, botline, ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor)) / (df$nhhmem ^ 0.5) 
+      
+     return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+     data <- data[!is.na(data[[var]]), ] 
+     resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+     r_stat <- lapply(resamples, function(x) gini(x, var)) 
+     std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+     return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars, subset) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] %>% 
> #     filter(eval(parse(text = subset), .)) 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(funs(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+     set.seed(324) 
+     ccs <- c("au", "at", "be", "br", "ca", "cl", "cn", "co", "cz", "dk",  
+              "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is",  
+              "in", "ie", "il", "it", "jp", "lu", "lt", "mx", "nl", "no", "pa",   
+              "py", "pe", "pl", "ro", "ru", "rs", "sk", "si", "za", "kr", "es",   
+              "se", "ch", "tw", "uk", "us", "uy") 
+     cc <- tolower(cc) 
+     if (!cc %in% ccs) { 
+         stop("Please specify a LIS country in iso2c format") 
+     } 
+     last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+     yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:last_year_yy))) 
+      
+     datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+     vars <- c("dhi", "hi", "factor", "hitp", "hc", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+      
+     v <- c("disp_sqrt10", "disp_sqrt") 
+      
+     for (ccyy in datasets) { 
+         cat("") 
+         df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+         if (!class(df)[1] == "try-error") { 
+             mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+             if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+                 df <- setups(df) 
+                 cat(paste(ccyy, 
+                           nrow(df %>%  
+                                    filter(!is.na(disp_sqrt10))), 
+                           nrow(df %>%  
+                                    filter(!is.na(disp_sqrt) & disp_sqrt > 10 * wNtile(df$dhi, df$hpopwgt, 0.5))), 
+                           10 * wNtile(df$dhi, df$hpopwgt, 0.5)), 
+                     sep = "\n") 
+                 print(summary(df %>%  
+                                   pull(disp_sqrt10))) 
+                 print(summary(df %>%  
+                                   filter(disp_sqrt > 10 * wNtile(df$dhi, df$hpopwgt, 0.5)) %>%  
+                                   pull(disp_sqrt))) 
+                 print(c("over", ccyy, df %>% 
+                           filter(disp_sqrt_med > 10) %>%  
+                           pull(disp_sqrt_med) %>%  
+                             sort())) 
+                 for (var in v) { 
+                     if (grepl("hh", var)) { 
+                         df$wt <- df$hpopwgt 
+                     } else { 
+                         df$wt <- df$hpopwgt * df$nhhmem 
+                     } 
+                     if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+                         cat(paste("gini", 
+                                   ccyy,  
+                                   var,  
+                                   gini(df, var), 
+                                   boot_gini_se(df, var, reps = reps), 
+                                   df$grossnet[1], 
+                                   sep = ","), sep = "\n") 
+                     } 
+                 } 
+             } 
+         } 
+     } 
+ } 
>  
> # Call 
> get_ginis("cz", reps = 500) 
[1] "Loading dataset cz92h..."
cz92h 16234 0 774000
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0   37586   47659   51770   60677  547301 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
                                                
[1] "over"  "cz92h"
gini,cz92h,disp_sqrt10,0.2049,0.0024,100
gini,cz92h,disp_sqrt,0.2058,0.0025,100
[1] "Loading dataset cz96h..."
cz96h 28148 4 1431000
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0   64400   84769   97589  117318 1431000 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
1512000 1701120 1988430 2028865 2316175 2626600 
[1] "over"  "cz96h" "10.6"  "12.3"  "15.5"  "18.4" 
gini,cz96h,disp_sqrt10,0.2554,0.0021,100
gini,cz96h,disp_sqrt,0.2566,0.0022,100
[1] "Loading dataset cz02h..."
cz02h 7973 2 1979190
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0   98548  128354  150779  176216 1979190 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
1982728 2123404 2264080 2264080 2404757 2545433 
[1] "over"  "cz02h" "12.9" 
gini,cz02h,disp_sqrt10,0.255,0.0035,120
gini,cz02h,disp_sqrt,0.2556,0.0035,120
[1] "Loading dataset cz04h..."
cz04h 4351 1 2221770
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   2000  106950  137886  159843  188990 2221770 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
3040173 3040173 3040173 3040173 3040173 3040173 
[1] "over"  "cz04h" "13.7" 
gini,cz04h,disp_sqrt10,0.2644,0.0055,100
gini,cz04h,disp_sqrt,0.2666,0.0063,100
[1] "Loading dataset cz07h..."
cz07h 11294 1 2809840
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0  133585  171507  195807  232141 2180000 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
2861257 2861257 2861257 2861257 2861257 2861257 
[1] "over"  "cz07h" "10.2" 
gini,cz07h,disp_sqrt10,0.251,0.0036,100
gini,cz07h,disp_sqrt,0.2519,0.0039,100
[1] "Loading dataset cz10h..."
cz10h 8866 0 3181160
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0  152666  195367  224789  266985 2249420 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
                                                
[1] "over"  "cz10h"
gini,cz10h,disp_sqrt10,0.2564,0.0038,100
gini,cz10h,disp_sqrt,0.2564,0.0036,100
[1] "Loading dataset cz13h..."
cz13h 8053 2 3211000
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  31914  162286  209252  238955  278884 3211000 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
3529090 3663529 3797968 3797968 3932408 4066847 
[1] "over"  "cz13h" "11"    "12.7" 
gini,cz13h,disp_sqrt10,0.2571,0.004,100
gini,cz13h,disp_sqrt,0.2587,0.0046,100
> 
> proc.time()
   user  system elapsed 
 38.613   0.984  41.095 


