From: postbox@lisdatacenter.org
Subject: job 614435 fi
Date: April 5, 2019 at 10:44:50 AM CDT
To: fsolt@mac.com

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> library(dplyr) 

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

>  
> ## Define functions 
> gini <- function(df, x) { 
+     df1 <- df[!is.na(df[[x]]), ] 
+     x <- as.vector(df1[[x]]) 
+     weight <- df1$wt 
+      
+     ox <- order(x) 
+     x <- as.vector(x)[ox] 
+     weight <- as.vector(weight)[ox] / sum(weight)  
+     p <- cumsum(weight) 
+     nu <- cumsum(weight * x) 
+     n <- length(nu) 
+     nu <- nu / nu[n] 
+     res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+     return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+     x <- var[order(var)] 
+     y <- wgt[order(var)] 
+     z <- cumsum(y) / sum(y) 
+     cop <- rep(NA, length(split))  
+     for (i in 1:length(cop)) { 
+         cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+     } 
+     return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+     tb <- ifelse(var < botline, botline, var) 
+     tb <- ifelse(tb > topline, topline, tb) 
+     return(tb) 
+ } 
>  
> setups <- function(df) { 
+     botline <- 0 
+     topline10 <- 10 * wNtile(df$dhi, df$hpopwgt, 0.5) 
+      
+     df$disp_sqrt10 <- topBottom(df$dhi, botline, topline10) / (df$nhhmem ^ 0.5) 
+     df$disp_sqrt <- ifelse(df$dhi < botline, botline, df$dhi) / (df$nhhmem ^ 0.5)  
+     df$disp_sqrt_med <- round(df$disp_sqrt / wNtile(df$dhi, df$hpopwgt, 0.5), 1) 
+  
+     df$market_sqrt10 <- topBottom(ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor), botline, topline10) / (df$nhhmem ^ 0.5) 
+     df$market_sqrt <- ifelse(ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor) < 0, botline, ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor)) / (df$nhhmem ^ 0.5) 
+      
+     return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+     data <- data[!is.na(data[[var]]), ] 
+     resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+     r_stat <- lapply(resamples, function(x) gini(x, var)) 
+     std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+     return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars, subset) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] %>% 
> #     filter(eval(parse(text = subset), .)) 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(funs(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+     set.seed(324) 
+     ccs <- c("au", "at", "be", "br", "ca", "cl", "cn", "co", "cz", "dk",  
+              "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is",  
+              "in", "ie", "il", "it", "jp", "lu", "lt", "mx", "nl", "no", "pa",   
+              "py", "pe", "pl", "ro", "ru", "rs", "sk", "si", "za", "kr", "es",   
+              "se", "ch", "tw", "uk", "us", "uy") 
+     cc <- tolower(cc) 
+     if (!cc %in% ccs) { 
+         stop("Please specify a LIS country in iso2c format") 
+     } 
+     last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+     yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:last_year_yy))) 
+      
+     datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+     vars <- c("dhi", "hi", "factor", "hitp", "hc", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+      
+     v <- c("disp_sqrt10", "disp_sqrt") 
+      
+     for (ccyy in datasets) { 
+         cat("") 
+         df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+         if (!class(df)[1] == "try-error") { 
+             mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+             if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+                 df <- setups(df) 
+                 cat(paste(ccyy, 
+                           nrow(df %>%  
+                                    filter(!is.na(disp_sqrt10))), 
+                           nrow(df %>%  
+                                    filter(!is.na(disp_sqrt) & disp_sqrt > 10 * wNtile(df$dhi, df$hpopwgt, 0.5))), 
+                           10 * wNtile(df$dhi, df$hpopwgt, 0.5)), 
+                     sep = "\n") 
+                 print(summary(df %>%  
+                                   pull(disp_sqrt10))) 
+                 print(summary(df %>%  
+                                   filter(disp_sqrt > 10 * wNtile(df$dhi, df$hpopwgt, 0.5)) %>%  
+                                   pull(disp_sqrt))) 
+                 print(c("over", ccyy, df %>% 
+                           filter(disp_sqrt_med > 10) %>%  
+                           pull(disp_sqrt_med) %>%  
+                             sort())) 
+                 for (var in v) { 
+                     if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+                         cat(paste("gini", 
+                                   ccyy,  
+                                   var,  
+                                   gini(df, var), 
+                                   boot_gini_se(df, var, reps = reps), 
+                                   df$grossnet[1], 
+                                   sep = ","), sep = "\n") 
+                     } 
+                 } 
+             } 
+         } 
+     } 
+ } 
>  
> # Call 
> get_ginis("fi", reps = 500) 
[1] "Loading dataset fi87h..."
fi87h 11863 1 846800
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0   49063   65549   69494   83940  846800 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
1361800 1361800 1361800 1361800 1361800 1361800 
[1] "over"  "fi87h" "16.1" 
gini,fi87h,disp_sqrt10,0,0,110
gini,fi87h,disp_sqrt,0,0,110
[1] "Loading dataset fi91h..."
fi91h 11749 0 1131000
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0   64710   86395   92964  112670  620416 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
                                                
[1] "over"  "fi91h"
gini,fi91h,disp_sqrt10,0,0,110
gini,fi91h,disp_sqrt,0,0,110
[1] "Loading dataset fi95h..."
fi95h 9262 3 1069420
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0   64392   83938   91125  108594  756194 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
1147887 1285349 1422810 1468322 1628539 1834269 
[1] "over"  "fi95h" "10.7"  "13.3"  "17.2" 
gini,fi95h,disp_sqrt10,0,0,110
gini,fi95h,disp_sqrt,0,0,110
[1] "Loading dataset fi00h..."
fi00h 10423 5 1231130
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0   76825  106992  119607  142205 1231130 
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
 1402050  1673427  2005807  6003712  8688285 16248990 
[1] "over"  "fi00h" "11.4"  "13.6"  "16.3"  "70.6"  "132"  
gini,fi00h,disp_sqrt10,0,0,110
gini,fi00h,disp_sqrt,0,0,110
[1] "Loading dataset fi04h..."
fi04h 11228 10 243610
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
      0   14148   19927   22621   27594  243610       1 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 249840  334693  591510  676750  875059 1353710 
 [1] "over"  "fi04h" "10.3"  "10.5"  "11"    "21.9"  "23.3"  "25.2"  "26.1" 
[10] "39.2"  "54.7"  "55.6" 
gini,fi04h,disp_sqrt10,0,0,110
gini,fi04h,disp_sqrt,0,0,110
[1] "Loading dataset fi07h..."
fi07h 10472 7 276640
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0   16272   23275   26256   31780  265429 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 291167  356727  426417  415802  462929  553714 
[1] "over"  "fi07h" "10.5"  "12.5"  "13.3"  "15.4"  "16"    "17.5"  "20"   
gini,fi07h,disp_sqrt10,0,0,110
gini,fi07h,disp_sqrt,0,0,110
[1] "Loading dataset fi10h..."
fi10h 9351 5 297470
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0   17419   24750   27839   33932  297470 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 380341  419266  772614  894772  897320 2004318 
[1] "over"  "fi10h" "12.8"  "14.1"  "26"    "30.2"  "67.4" 
gini,fi10h,disp_sqrt10,0,0,110
gini,fi10h,disp_sqrt,0,0,110
[1] "Loading dataset fi13h..."
fi13h 11030 3 319620
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0   19510   27270   30637   37378  319620 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 513239  787159 1061078 1087418 1374508 1687938 
[1] "over"  "fi13h" "16.1"  "33.2"  "52.8" 
gini,fi13h,disp_sqrt10,0,0,110
gini,fi13h,disp_sqrt,0,0,110
> 
> proc.time()
   user  system elapsed 
 35.549   0.514  38.001 


