From: postbox@lisdatacenter.org
Subject: job 614470 uk
Date: April 5, 2019 at 10:58:23 AM CDT
To: fsolt@mac.com

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> library(dplyr) 

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

>  
> ## Define functions 
> gini <- function(df, x) { 
+     df1 <- df[!is.na(df[[x]]), ] 
+     x <- as.vector(df1[[x]]) 
+     weight <- df1$wt 
+      
+     ox <- order(x) 
+     x <- as.vector(x)[ox] 
+     weight <- as.vector(weight)[ox] / sum(weight)  
+     p <- cumsum(weight) 
+     nu <- cumsum(weight * x) 
+     n <- length(nu) 
+     nu <- nu / nu[n] 
+     res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+     return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+     x <- var[order(var)] 
+     y <- wgt[order(var)] 
+     z <- cumsum(y) / sum(y) 
+     cop <- rep(NA, length(split))  
+     for (i in 1:length(cop)) { 
+         cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+     } 
+     return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+     tb <- ifelse(var < botline, botline, var) 
+     tb <- ifelse(tb > topline, topline, tb) 
+     return(tb) 
+ } 
>  
> setups <- function(df) { 
+     botline <- 0 
+     topline10 <- 10 * wNtile(df$dhi, df$hpopwgt, 0.5) 
+      
+     df$disp_sqrt10 <- topBottom(df$dhi, botline, topline10) / (df$nhhmem ^ 0.5) 
+     df$disp_sqrt <- ifelse(df$dhi < botline, botline, df$dhi) / (df$nhhmem ^ 0.5)  
+     df$disp_sqrt_med <- round(df$disp_sqrt / wNtile(df$dhi, df$hpopwgt, 0.5), 1) 
+  
+     df$market_sqrt10 <- topBottom(ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor), botline, topline10) / (df$nhhmem ^ 0.5) 
+     df$market_sqrt <- ifelse(ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor) < 0, botline, ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor)) / (df$nhhmem ^ 0.5) 
+      
+     return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+     data <- data[!is.na(data[[var]]), ] 
+     resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+     r_stat <- lapply(resamples, function(x) gini(x, var)) 
+     std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+     return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars, subset) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] %>% 
> #     filter(eval(parse(text = subset), .)) 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(funs(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+     set.seed(324) 
+     ccs <- c("au", "at", "be", "br", "ca", "cl", "cn", "co", "cz", "dk",  
+              "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is",  
+              "in", "ie", "il", "it", "jp", "lu", "lt", "mx", "nl", "no", "pa",   
+              "py", "pe", "pl", "ro", "ru", "rs", "sk", "si", "za", "kr", "es",   
+              "se", "ch", "tw", "uk", "us", "uy") 
+     cc <- tolower(cc) 
+     if (!cc %in% ccs) { 
+         stop("Please specify a LIS country in iso2c format") 
+     } 
+     last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+     yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:last_year_yy))) 
+      
+     datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+     vars <- c("dhi", "hi", "factor", "hitp", "hc", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+      
+     v <- c("disp_sqrt10", "disp_sqrt") 
+      
+     for (ccyy in datasets) { 
+         cat("") 
+         df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+         if (!class(df)[1] == "try-error") { 
+             mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+             if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+                 df <- setups(df) 
+                 cat(paste(ccyy, 
+                           nrow(df %>%  
+                                    filter(!is.na(disp_sqrt10))), 
+                           nrow(df %>%  
+                                    filter(!is.na(disp_sqrt) & disp_sqrt > 10 * wNtile(df$dhi, df$hpopwgt, 0.5))), 
+                           10 * wNtile(df$dhi, df$hpopwgt, 0.5)), 
+                     sep = "\n") 
+                 print(summary(df %>%  
+                                   pull(disp_sqrt10))) 
+                 print(summary(df %>%  
+                                   filter(disp_sqrt > 10 * wNtile(df$dhi, df$hpopwgt, 0.5)) %>%  
+                                   pull(disp_sqrt))) 
+                 print(c("over", ccyy, df %>% 
+                           filter(disp_sqrt_med > 10) %>%  
+                           pull(disp_sqrt_med) %>%  
+                             sort())) 
+                 for (var in v) { 
+                     if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+                         cat(paste("gini", 
+                                   ccyy,  
+                                   var,  
+                                   gini(df, var), 
+                                   boot_gini_se(df, var, reps = reps), 
+                                   df$grossnet[1], 
+                                   sep = ","), sep = "\n") 
+                     } 
+                 } 
+             } 
+         } 
+     } 
+ } 
>  
> # Call 
> get_ginis("uk", reps = 500) 
[1] "Loading dataset uk69h..."
uk69h 7005 1 12640
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
    0.0   464.1   669.9   766.1   954.6  8937.8 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  15628   15628   15628   15628   15628   15628 
[1] "over"  "uk69h" "12.4" 
gini,uk69h,disp_sqrt10,0,0,100
gini,uk69h,disp_sqrt,0,0,100
[1] "Loading dataset uk74h..."
uk74h 6695 1 22010
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
    0.0   872.5  1296.2  1451.4  1815.3 22010.0 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  31044   31044   31044   31044   31044   31044 
[1] "over"  "uk74h" "14.1" 
gini,uk74h,disp_sqrt10,0,0,100
gini,uk74h,disp_sqrt,0,0,100
[1] "Loading dataset uk79h..."
uk79h 6777 0 45040
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0    1786    2740    3047    3926   20846 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
                                                
[1] "over"  "uk79h"
gini,uk79h,disp_sqrt10,0,0,100
gini,uk79h,disp_sqrt,0,0,100
[1] "Loading dataset uk86h..."
uk86h 7178 0 73990
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0    3266    4765    5605    7094   50320 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
                                                
[1] "over"  "uk86h"
gini,uk86h,disp_sqrt10,0,0,100
gini,uk86h,disp_sqrt,0,0,100
[1] "Loading dataset uk91h..."
uk91h 7056 4 110690
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0    4379    7249    8714   11172  110690 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 114383  115011  207667  214084  306740  326620 
[1] "over"  "uk91h" "10.3"  "10.4"  "27.1"  "29.5" 
gini,uk91h,disp_sqrt10,0,0,100
gini,uk91h,disp_sqrt,0,0,100
[1] "Loading dataset uk94h..."
uk94h 26399 9 121950
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0    5249    7828    9786   12079  121950 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 130346  133005  163335  235563  167143  594479 
 [1] "over"  "uk94h" "10.7"  "10.8"  "10.9"  "12.2"  "13.4"  "13.5"  "13.7" 
[10] "39.9"  "48.7" 
gini,uk94h,disp_sqrt10,0,0,100
gini,uk94h,disp_sqrt,0,0,100
[1] "Loading dataset uk95h..."
uk95h 6797 2 124040
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0    5348    8296   10107   12766   87710 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 171792  174463  177134  177134  179805  182475 
[1] "over"  "uk95h" "13.8"  "14.7" 
gini,uk95h,disp_sqrt10,0,0,100
gini,uk95h,disp_sqrt,0,0,100
[1] "Loading dataset uk99h..."
uk99h 24988 19 150490
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0    6412    9959   12402   15514  150490 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 157210  178288  214683  293518  259902  935552 
 [1] "over"  "uk99h" "10.4"  "10.6"  "11.2"  "11.4"  "11.5"  "12.2"  "12.7" 
[10] "13.2"  "13.8"  "14.3"  "14.4"  "14.5"  "14.5"  "15.5"  "19"    "24.9" 
[19] "25.3"  "59.1"  "62.2" 
gini,uk99h,disp_sqrt10,0,0,100
gini,uk99h,disp_sqrt,0,0,100
[1] "Loading dataset uk04h..."
uk04h 27753 28 192260
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
      0    8408   12408   15411   18684  192260     288 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 192462  229557  274912  334935  429932  637202 
 [1] "over"  "uk04h" "10.4"  "10.5"  "10.8"  "10.8"  "11.5"  "11.8"  "12"   
[10] "12"    "12.1"  "12.2"  "12.7"  "13.4"  "13.7"  "14.9"  "15.3"  "15.5" 
[19] "17.9"  "19.2"  "21.1"  "21.8"  "24.2"  "26.5"  "26.7"  "27.5"  "28.4" 
[28] "31.9"  "33.1" 
gini,uk04h,disp_sqrt10,0,0,100
gini,uk04h,disp_sqrt,0,0,100
[1] "Loading dataset uk07h..."
uk07h 24977 14 224000
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0   10065   14733   18049   22020  224000 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 224467  251486  292788  354784  403496  919590 
 [1] "over"  "uk07h" "10.7"  "11.2"  "11.4"  "11.8"  "12.2"  "14"    "14.9" 
[10] "16"    "18.7"  "19.7"  "20.2"  "41.1" 
gini,uk07h,disp_sqrt10,0,0,110
gini,uk07h,disp_sqrt,0,0,110
[1] "Loading dataset uk10h..."
uk10h 25350 18 231730
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0   11062   15723   19201   22964  231730 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 242379  253266  278402  326073  334345  672695 
 [1] "over"  "uk10h" "10.5"  "10.5"  "10.9"  "10.9"  "10.9"  "11"    "11.3" 
[10] "11.3"  "11.5"  "12.5"  "13.2"  "13.8"  "14"    "14.6"  "17.3"  "19.6" 
[19] "20.7"  "29"   
gini,uk10h,disp_sqrt10,0,0,110
gini,uk10h,disp_sqrt,0,0,110
[1] "Loading dataset uk13h..."
uk13h 20135 6 256920
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
      0   11972   16854   20650   25067  256920       2 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 273624  274054  276966  290471  291654  345636 
[1] "over"  "uk13h" "10.7"  "10.7"  "10.7"  "10.9"  "11.5"  "13.5" 
gini,uk13h,disp_sqrt10,0,0,110
gini,uk13h,disp_sqrt,0,0,110
[1] "Loading dataset uk16h..."
uk16h 19380 16 272500
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0   12704   18078   22074   26708  272500 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 272638  275912  287128  402478  561637  785916 
 [1] "over"  "uk16h" "10.1"  "10.1"  "10.1"  "10.1"  "10.1"  "10.2"  "10.3" 
[10] "10.8"  "11.4"  "12.8"  "20.5"  "21"    "22.9"  "27"    "28.8" 
gini,uk16h,disp_sqrt10,0,0,110
gini,uk16h,disp_sqrt,0,0,110
> 
> proc.time()
   user  system elapsed 
 86.482   1.307  90.967 


