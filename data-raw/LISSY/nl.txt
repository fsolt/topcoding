From: postbox@lisdatacenter.org
Subject: job 614451 nl
Date: April 5, 2019 at 10:50:24 AM CDT
To: fsolt@mac.com

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> library(dplyr) 

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

>  
> ## Define functions 
> gini <- function(df, x) { 
+     df1 <- df[!is.na(df[[x]]), ] 
+     x <- as.vector(df1[[x]]) 
+     weight <- df1$wt 
+      
+     ox <- order(x) 
+     x <- as.vector(x)[ox] 
+     weight <- as.vector(weight)[ox] / sum(weight)  
+     p <- cumsum(weight) 
+     nu <- cumsum(weight * x) 
+     n <- length(nu) 
+     nu <- nu / nu[n] 
+     res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+     return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+     x <- var[order(var)] 
+     y <- wgt[order(var)] 
+     z <- cumsum(y) / sum(y) 
+     cop <- rep(NA, length(split))  
+     for (i in 1:length(cop)) { 
+         cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+     } 
+     return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+     tb <- ifelse(var < botline, botline, var) 
+     tb <- ifelse(tb > topline, topline, tb) 
+     return(tb) 
+ } 
>  
> setups <- function(df) { 
+     botline <- 0 
+     topline10 <- 10 * wNtile(df$dhi, df$hpopwgt, 0.5) 
+      
+     df$disp_sqrt10 <- topBottom(df$dhi, botline, topline10) / (df$nhhmem ^ 0.5) 
+     df$disp_sqrt <- ifelse(df$dhi < botline, botline, df$dhi) / (df$nhhmem ^ 0.5)  
+     df$disp_sqrt_med <- round(df$disp_sqrt / wNtile(df$dhi, df$hpopwgt, 0.5), 1) 
+  
+     df$market_sqrt10 <- topBottom(ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor), botline, topline10) / (df$nhhmem ^ 0.5) 
+     df$market_sqrt <- ifelse(ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor) < 0, botline, ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor)) / (df$nhhmem ^ 0.5) 
+      
+     return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+     data <- data[!is.na(data[[var]]), ] 
+     resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+     r_stat <- lapply(resamples, function(x) gini(x, var)) 
+     std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+     return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars, subset) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] %>% 
> #     filter(eval(parse(text = subset), .)) 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(funs(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+     set.seed(324) 
+     ccs <- c("au", "at", "be", "br", "ca", "cl", "cn", "co", "cz", "dk",  
+              "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is",  
+              "in", "ie", "il", "it", "jp", "lu", "lt", "mx", "nl", "no", "pa",   
+              "py", "pe", "pl", "ro", "ru", "rs", "sk", "si", "za", "kr", "es",   
+              "se", "ch", "tw", "uk", "us", "uy") 
+     cc <- tolower(cc) 
+     if (!cc %in% ccs) { 
+         stop("Please specify a LIS country in iso2c format") 
+     } 
+     last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+     yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:last_year_yy))) 
+      
+     datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+     vars <- c("dhi", "hi", "factor", "hitp", "hc", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+      
+     v <- c("disp_sqrt10", "disp_sqrt") 
+      
+     for (ccyy in datasets) { 
+         cat("") 
+         df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+         if (!class(df)[1] == "try-error") { 
+             mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+             if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+                 df <- setups(df) 
+                 cat(paste(ccyy, 
+                           nrow(df %>%  
+                                    filter(!is.na(disp_sqrt10))), 
+                           nrow(df %>%  
+                                    filter(!is.na(disp_sqrt) & disp_sqrt > 10 * wNtile(df$dhi, df$hpopwgt, 0.5))), 
+                           10 * wNtile(df$dhi, df$hpopwgt, 0.5)), 
+                     sep = "\n") 
+                 print(summary(df %>%  
+                                   pull(disp_sqrt10))) 
+                 print(summary(df %>%  
+                                   filter(disp_sqrt > 10 * wNtile(df$dhi, df$hpopwgt, 0.5)) %>%  
+                                   pull(disp_sqrt))) 
+                 print(c("over", ccyy, df %>% 
+                           filter(disp_sqrt_med > 10) %>%  
+                           pull(disp_sqrt_med) %>%  
+                             sort())) 
+                 for (var in v) { 
+                     if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+                         cat(paste("gini", 
+                                   ccyy,  
+                                   var,  
+                                   gini(df, var), 
+                                   boot_gini_se(df, var, reps = reps), 
+                                   df$grossnet[1], 
+                                   sep = ","), sep = "\n") 
+                     } 
+                 } 
+             } 
+         } 
+     } 
+ } 
>  
> # Call 
> get_ginis("nl", reps = 500) 
[1] "Loading dataset nl83h..."
nl83h 4833 0 313500
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0   14105   19203   20972   26015   85840 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
                                                
[1] "over"  "nl83h"
gini,nl83h,disp_sqrt10,0,0,100
gini,nl83h,disp_sqrt,0,0,100
[1] "Loading dataset nl87h..."
nl87h 4190 0 315200
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0   15557   20872   22939   28215   98500 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
                                                
[1] "over"  "nl87h"
gini,nl87h,disp_sqrt10,0,0,100
gini,nl87h,disp_sqrt,0,0,100
[1] "Loading dataset nl90h..."
nl90h 4378 1 398880
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0   18540   26120   29241   36312  282051 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 605984  605984  605984  605984  605984  605984 
[1] "over"  "nl90h" "15.2" 
gini,nl90h,disp_sqrt10,0,0,100
gini,nl90h,disp_sqrt,0,0,100
[1] "Loading dataset nl93h..."
nl93h 5187 0 407830
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0   19270   27290   29757   38239  155799 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
                                                
[1] "over"  "nl93h"
gini,nl93h,disp_sqrt10,0,0,100
gini,nl93h,disp_sqrt,0,0,100
[1] "Loading dataset nl99h..."
nl99h 4344 0 582170
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
      0   26432   36232   39240   48510  264606     663 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
                                                
[1] "over"  "nl99h"
gini,nl99h,disp_sqrt10,0,0,100
gini,nl99h,disp_sqrt,0,0,100
[1] "Loading dataset nl04h..."
nl04h 9356 2 261000
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0   15021   19481   21475   25636  261000 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 275843  305886  335930  335930  365973  396016 
[1] "over"  "nl04h" "10.6"  "15.2" 
gini,nl04h,disp_sqrt10,0,0,100
gini,nl04h,disp_sqrt,0,0,100
[1] "Loading dataset nl07h..."
nl07h 10337 3 295210
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0   17474   22915   25927   30086  295210 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 431242  470094  508946  534706  586437  663929 
[1] "over"  "nl07h" "14.6"  "17.2"  "22.5" 
gini,nl07h,disp_sqrt10,0,0,110
gini,nl07h,disp_sqrt,0,0,110
[1] "Loading dataset nl10h..."
nl10h 10492 2 302480
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0   18364   24032   26770   31653  302480 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 383165  473630  564095  564095  654560  745025 
[1] "over"  "nl10h" "12.7"  "24.6" 
gini,nl10h,disp_sqrt10,0,0,110
gini,nl10h,disp_sqrt,0,0,110
[1] "Loading dataset nl13h..."
nl13h 10174 3 301580
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0   18718   24897   27766   32819  301580 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 308743  323549  338356  336766  350777  363198 
[1] "over"  "nl13h" "10.2"  "11.2"  "12"   
gini,nl13h,disp_sqrt10,0,0,110
gini,nl13h,disp_sqrt,0,0,110
> 
> proc.time()
   user  system elapsed 
 30.119   0.476  31.852 


