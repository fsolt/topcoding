From: postbox@lisdatacenter.org
Subject: job 614510 at
Date: April 5, 2019 at 1:03:05 PM CDT
To: fsolt@mac.com

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> library(dplyr) 

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

>  
> ## Define functions 
> gini <- function(df, x) { 
+     df1 <- df[!is.na(df[[x]]), ] 
+     x <- as.vector(df1[[x]]) 
+     weight <- df1$wt 
+      
+     ox <- order(x) 
+     x <- as.vector(x)[ox] 
+     weight <- as.vector(weight)[ox] / sum(weight)  
+     p <- cumsum(weight) 
+     nu <- cumsum(weight * x) 
+     n <- length(nu) 
+     nu <- nu / nu[n] 
+     res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+     return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+     x <- var[order(var)] 
+     y <- wgt[order(var)] 
+     z <- cumsum(y) / sum(y) 
+     cop <- rep(NA, length(split))  
+     for (i in 1:length(cop)) { 
+         cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+     } 
+     return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+     tb <- ifelse(var < botline, botline, var) 
+     tb <- ifelse(tb > topline, topline, tb) 
+     return(tb) 
+ } 
>  
> setups <- function(df) { 
+     botline <- 0 
+     topline10 <- 10 * wNtile(df$dhi, df$hpopwgt, 0.5) 
+      
+     df$disp_sqrt10 <- topBottom(df$dhi, botline, topline10) / (df$nhhmem ^ 0.5) 
+     df$disp_sqrt <- ifelse(df$dhi < botline, botline, df$dhi) / (df$nhhmem ^ 0.5)  
+     df$disp_sqrt_med <- round(df$disp_sqrt / wNtile(df$dhi, df$hpopwgt, 0.5), 1) 
+  
+     df$market_sqrt10 <- topBottom(ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor), botline, topline10) / (df$nhhmem ^ 0.5) 
+     df$market_sqrt <- ifelse(ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor) < 0, botline, ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor)) / (df$nhhmem ^ 0.5) 
+      
+     return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+     data <- data[!is.na(data[[var]]), ] 
+     resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+     r_stat <- lapply(resamples, function(x) gini(x, var)) 
+     std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+     return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars, subset) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] %>% 
> #     filter(eval(parse(text = subset), .)) 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(funs(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+     set.seed(324) 
+     ccs <- c("au", "at", "be", "br", "ca", "cl", "cn", "co", "cz", "dk",  
+              "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is",  
+              "in", "ie", "il", "it", "jp", "lu", "lt", "mx", "nl", "no", "pa",   
+              "py", "pe", "pl", "ro", "ru", "rs", "sk", "si", "za", "kr", "es",   
+              "se", "ch", "tw", "uk", "us", "uy") 
+     cc <- tolower(cc) 
+     if (!cc %in% ccs) { 
+         stop("Please specify a LIS country in iso2c format") 
+     } 
+     last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+     yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:last_year_yy))) 
+      
+     datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+     vars <- c("dhi", "hi", "factor", "hitp", "hc", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+      
+     v <- c("disp_sqrt10", "disp_sqrt") 
+      
+     for (ccyy in datasets) { 
+         cat("") 
+         df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+         if (!class(df)[1] == "try-error") { 
+             mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+             if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+                 df <- setups(df) 
+                 cat(paste(ccyy, 
+                           nrow(df %>%  
+                                    filter(!is.na(disp_sqrt10))), 
+                           nrow(df %>%  
+                                    filter(!is.na(disp_sqrt) & disp_sqrt > 10 * wNtile(df$dhi, df$hpopwgt, 0.5))), 
+                           10 * wNtile(df$dhi, df$hpopwgt, 0.5)), 
+                     sep = "\n") 
+                 print(summary(df %>%  
+                                   pull(disp_sqrt10))) 
+                 print(summary(df %>%  
+                                   filter(disp_sqrt > 10 * wNtile(df$dhi, df$hpopwgt, 0.5)) %>%  
+                                   pull(disp_sqrt))) 
+                 print(c("over", ccyy, df %>% 
+                           filter(disp_sqrt_med > 10) %>%  
+                           pull(disp_sqrt_med) %>%  
+                             sort())) 
+                 for (var in v) { 
+                     if (grepl("hh", var)) { 
+                         df$wt <- df$hpopwgt 
+                     } else { 
+                         df$wt <- df$hpopwgt * df$nhhmem 
+                     } 
+                     if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+                         cat(paste("gini", 
+                                   ccyy,  
+                                   var,  
+                                   gini(df, var), 
+                                   boot_gini_se(df, var, reps = reps), 
+                                   df$grossnet[1], 
+                                   sep = ","), sep = "\n") 
+                     } 
+                 } 
+             } 
+         } 
+     } 
+ } 
>  
> # Call 
> get_ginis("at", reps = 500) 
[1] "Loading dataset at87h..."
at87h 11147 0 2100000
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   4620  100800  143876  154855  193990  940452 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
                                                
[1] "over"  "at87h"
gini,at87h,disp_sqrt10,0.2273,0.0023,320
gini,at87h,disp_sqrt,0.2273,0.0026,320
[1] "Loading dataset at94h..."
at94h 2869 0 3459320
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
      0  143896  200960  228695  280142 2340000     390 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
                                                
[1] "over"  "at94h"
gini,at94h,disp_sqrt10,0.2818,0.0059,200
gini,at94h,disp_sqrt,0.2818,0.0062,200
[1] "Loading dataset at95h..."
at95h 19512 0 2984800
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
      0  125279  181755  196400  251586 1170120    3151 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
                                                
[1] "over"  "at95h"
gini,at95h,disp_sqrt10,0.2834,0.0021,320
gini,at95h,disp_sqrt,0.2834,0.002,320
[1] "Loading dataset at97h..."
at97h 2685 0 3406000
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
      0  148940  209917  233414  287898 1981000     233 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
                                                
[1] "over"  "at97h"
gini,at97h,disp_sqrt10,0.267,0.0054,200
gini,at97h,disp_sqrt,0.267,0.0052,200
[1] "Loading dataset at00h..."
at00h 2340 0 3606000
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
      0  168000  230728  253841  306442 2081925     191 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
                                                
[1] "over"  "at00h"
gini,at00h,disp_sqrt10,0.258,0.0055,200
gini,at00h,disp_sqrt,0.2582,0.0056,200
[1] "Loading dataset at04h..."
at04h 5147 0 283880
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
      0   14219   19545   21891   26084  180805       1 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
                                                
[1] "over"  "at04h"
gini,at04h,disp_sqrt10,0.2684,0.004,110
gini,at04h,disp_sqrt,0.2686,0.004,110
[1] "Loading dataset at07h..."
at07h 5707 1 293140
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0   14826   20802   23523   28668  276170 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 316070  316070  316070  316070  316070  316070 
[1] "over"  "at07h" "10.8" 
gini,at07h,disp_sqrt10,0.2837,0.0037,110
gini,at07h,disp_sqrt,0.2845,0.004,110
[1] "Loading dataset at10h..."
at10h 6187 0 326690
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0   16920   23499   26648   32312  231005 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
                                                
[1] "over"  "at10h"
gini,at10h,disp_sqrt10,0.2798,0.0038,110
gini,at10h,disp_sqrt,0.2798,0.0037,110
[1] "Loading dataset at13h..."
at13h 5909 3 350400
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0   18094   25084   28461   34345  350400 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 360000  363713  367425  459944  509916  652407 
[1] "over"  "at13h" "10.3"  "10.5"  "18.6" 
gini,at13h,disp_sqrt10,0.2779,0.0045,110
gini,at13h,disp_sqrt,0.2807,0.0048,110
> 
> proc.time()
   user  system elapsed 
 31.280   0.769  43.121 


