From: postbox@lisdatacenter.org
Subject: job 614464 es
Date: April 5, 2019 at 10:56:11 AM CDT
To: fsolt@mac.com

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> library(dplyr) 

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

>  
> ## Define functions 
> gini <- function(df, x) { 
+     df1 <- df[!is.na(df[[x]]), ] 
+     x <- as.vector(df1[[x]]) 
+     weight <- df1$wt 
+      
+     ox <- order(x) 
+     x <- as.vector(x)[ox] 
+     weight <- as.vector(weight)[ox] / sum(weight)  
+     p <- cumsum(weight) 
+     nu <- cumsum(weight * x) 
+     n <- length(nu) 
+     nu <- nu / nu[n] 
+     res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+     return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+     x <- var[order(var)] 
+     y <- wgt[order(var)] 
+     z <- cumsum(y) / sum(y) 
+     cop <- rep(NA, length(split))  
+     for (i in 1:length(cop)) { 
+         cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+     } 
+     return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+     tb <- ifelse(var < botline, botline, var) 
+     tb <- ifelse(tb > topline, topline, tb) 
+     return(tb) 
+ } 
>  
> setups <- function(df) { 
+     botline <- 0 
+     topline10 <- 10 * wNtile(df$dhi, df$hpopwgt, 0.5) 
+      
+     df$disp_sqrt10 <- topBottom(df$dhi, botline, topline10) / (df$nhhmem ^ 0.5) 
+     df$disp_sqrt <- ifelse(df$dhi < botline, botline, df$dhi) / (df$nhhmem ^ 0.5)  
+     df$disp_sqrt_med <- round(df$disp_sqrt / wNtile(df$dhi, df$hpopwgt, 0.5), 1) 
+  
+     df$market_sqrt10 <- topBottom(ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor), botline, topline10) / (df$nhhmem ^ 0.5) 
+     df$market_sqrt <- ifelse(ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor) < 0, botline, ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor)) / (df$nhhmem ^ 0.5) 
+      
+     return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+     data <- data[!is.na(data[[var]]), ] 
+     resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+     r_stat <- lapply(resamples, function(x) gini(x, var)) 
+     std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+     return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars, subset) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] %>% 
> #     filter(eval(parse(text = subset), .)) 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(funs(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+     set.seed(324) 
+     ccs <- c("au", "at", "be", "br", "ca", "cl", "cn", "co", "cz", "dk",  
+              "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is",  
+              "in", "ie", "il", "it", "jp", "lu", "lt", "mx", "nl", "no", "pa",   
+              "py", "pe", "pl", "ro", "ru", "rs", "sk", "si", "za", "kr", "es",   
+              "se", "ch", "tw", "uk", "us", "uy") 
+     cc <- tolower(cc) 
+     if (!cc %in% ccs) { 
+         stop("Please specify a LIS country in iso2c format") 
+     } 
+     last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+     yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:last_year_yy))) 
+      
+     datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+     vars <- c("dhi", "hi", "factor", "hitp", "hc", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+      
+     v <- c("disp_sqrt10", "disp_sqrt") 
+      
+     for (ccyy in datasets) { 
+         cat("") 
+         df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+         if (!class(df)[1] == "try-error") { 
+             mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+             if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+                 df <- setups(df) 
+                 cat(paste(ccyy, 
+                           nrow(df %>%  
+                                    filter(!is.na(disp_sqrt10))), 
+                           nrow(df %>%  
+                                    filter(!is.na(disp_sqrt) & disp_sqrt > 10 * wNtile(df$dhi, df$hpopwgt, 0.5))), 
+                           10 * wNtile(df$dhi, df$hpopwgt, 0.5)), 
+                     sep = "\n") 
+                 print(summary(df %>%  
+                                   pull(disp_sqrt10))) 
+                 print(summary(df %>%  
+                                   filter(disp_sqrt > 10 * wNtile(df$dhi, df$hpopwgt, 0.5)) %>%  
+                                   pull(disp_sqrt))) 
+                 print(c("over", ccyy, df %>% 
+                           filter(disp_sqrt_med > 10) %>%  
+                           pull(disp_sqrt_med) %>%  
+                             sort())) 
+                 for (var in v) { 
+                     if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+                         cat(paste("gini", 
+                                   ccyy,  
+                                   var,  
+                                   gini(df, var), 
+                                   boot_gini_se(df, var, reps = reps), 
+                                   df$grossnet[1], 
+                                   sep = ","), sep = "\n") 
+                     } 
+                 } 
+             } 
+         } 
+     } 
+ } 
>  
> # Call 
> get_ginis("es", reps = 500) 
[1] "Loading dataset es80h..."
es80h 23939 1 5600000
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
      0  192135  288840  340253  420032 3535534      33 
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
11693366 11693366 11693366 11693366 11693366 11693366 
[1] "over"  "es80h" "20.9" 
gini,es80h,disp_sqrt10,0,0,200
gini,es80h,disp_sqrt,0,0,200
[1] "Loading dataset es85h..."
es85h 3165 0 9460310
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      1  351305  512500  605116  733975 6689449 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
                                                
[1] "over"  "es85h"
gini,es85h,disp_sqrt10,0,0,200
gini,es85h,disp_sqrt,0,0,200
[1] "Loading dataset es90h..."
es90h 21153 2 15902960
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
       0   588694   860252  1009589  1254407 13003452 
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
17889802 20841972 23794143 23794143 26746314 29698485 
[1] "over"  "es90h" "11.2"  "18.7" 
gini,es90h,disp_sqrt10,0,0,200
gini,es90h,disp_sqrt,0,0,200
[1] "Loading dataset es95h..."
es95h 5928 0 21620000
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max.     NA's 
       0   807938  1230926  1533949  1958384 12482313       72 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
                                                
[1] "over"  "es95h"
gini,es95h,disp_sqrt10,0,0,200
gini,es95h,disp_sqrt,0,0,200
[1] "Loading dataset es00h..."
es00h 4776 1 29070000
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max.     NA's 
       0  1081166  1695238  2041873  2607732 20555594      190 
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
30971277 30971277 30971277 30971277 30971277 30971277 
[1] "over"  "es00h" "10.7" 
gini,es00h,disp_sqrt10,0,0,200
gini,es00h,disp_sqrt,0,0,200
[1] "Loading dataset es04h..."
es04h 12996 1 193190
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0    7128   11234   13103   16888  136606 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 209882  209882  209882  209882  209882  209882 
[1] "over"  "es04h" "10.9" 
gini,es04h,disp_sqrt10,0,0,200
gini,es04h,disp_sqrt,0,0,200
[1] "Loading dataset es07h..."
es07h 13014 0 230550
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0    8924   13751   15737   20138  120623 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
                                                
[1] "over"  "es07h"
gini,es07h,disp_sqrt10,0,0,110
gini,es07h,disp_sqrt,0,0,110
[1] "Loading dataset es10h..."
es10h 13109 0 213540
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0    8534   13395   15619   20115  117600 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
                                                
[1] "over"  "es10h"
gini,es10h,disp_sqrt10,0,0,110
gini,es10h,disp_sqrt,0,0,110
[1] "Loading dataset es13h..."
es13h 11965 0 218190
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0    9670   15010   17498   22308  154284 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
                                                
[1] "over"  "es13h"
gini,es13h,disp_sqrt10,0,0,110
gini,es13h,disp_sqrt,0,0,110
> 
> proc.time()
   user  system elapsed 
 45.959   0.763  49.263 


