From: postbox@lisdatacenter.org
Subject: job 614456 pl
Date: April 5, 2019 at 10:53:13 AM CDT
To: fsolt@mac.com

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> library(dplyr) 

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

>  
> ## Define functions 
> gini <- function(df, x) { 
+     df1 <- df[!is.na(df[[x]]), ] 
+     x <- as.vector(df1[[x]]) 
+     weight <- df1$wt 
+      
+     ox <- order(x) 
+     x <- as.vector(x)[ox] 
+     weight <- as.vector(weight)[ox] / sum(weight)  
+     p <- cumsum(weight) 
+     nu <- cumsum(weight * x) 
+     n <- length(nu) 
+     nu <- nu / nu[n] 
+     res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+     return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+     x <- var[order(var)] 
+     y <- wgt[order(var)] 
+     z <- cumsum(y) / sum(y) 
+     cop <- rep(NA, length(split))  
+     for (i in 1:length(cop)) { 
+         cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+     } 
+     return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+     tb <- ifelse(var < botline, botline, var) 
+     tb <- ifelse(tb > topline, topline, tb) 
+     return(tb) 
+ } 
>  
> setups <- function(df) { 
+     botline <- 0 
+     topline10 <- 10 * wNtile(df$dhi, df$hpopwgt, 0.5) 
+      
+     df$disp_sqrt10 <- topBottom(df$dhi, botline, topline10) / (df$nhhmem ^ 0.5) 
+     df$disp_sqrt <- ifelse(df$dhi < botline, botline, df$dhi) / (df$nhhmem ^ 0.5)  
+     df$disp_sqrt_med <- round(df$disp_sqrt / wNtile(df$dhi, df$hpopwgt, 0.5), 1) 
+  
+     df$market_sqrt10 <- topBottom(ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor), botline, topline10) / (df$nhhmem ^ 0.5) 
+     df$market_sqrt <- ifelse(ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor) < 0, botline, ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor)) / (df$nhhmem ^ 0.5) 
+      
+     return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+     data <- data[!is.na(data[[var]]), ] 
+     resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+     r_stat <- lapply(resamples, function(x) gini(x, var)) 
+     std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+     return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars, subset) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] %>% 
> #     filter(eval(parse(text = subset), .)) 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(funs(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+     set.seed(324) 
+     ccs <- c("au", "at", "be", "br", "ca", "cl", "cn", "co", "cz", "dk",  
+              "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is",  
+              "in", "ie", "il", "it", "jp", "lu", "lt", "mx", "nl", "no", "pa",   
+              "py", "pe", "pl", "ro", "ru", "rs", "sk", "si", "za", "kr", "es",   
+              "se", "ch", "tw", "uk", "us", "uy") 
+     cc <- tolower(cc) 
+     if (!cc %in% ccs) { 
+         stop("Please specify a LIS country in iso2c format") 
+     } 
+     last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+     yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:last_year_yy))) 
+      
+     datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+     vars <- c("dhi", "hi", "factor", "hitp", "hc", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+      
+     v <- c("disp_sqrt10", "disp_sqrt") 
+      
+     for (ccyy in datasets) { 
+         cat("") 
+         df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+         if (!class(df)[1] == "try-error") { 
+             mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+             if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+                 df <- setups(df) 
+                 cat(paste(ccyy, 
+                           nrow(df %>%  
+                                    filter(!is.na(disp_sqrt10))), 
+                           nrow(df %>%  
+                                    filter(!is.na(disp_sqrt) & disp_sqrt > 10 * wNtile(df$dhi, df$hpopwgt, 0.5))), 
+                           10 * wNtile(df$dhi, df$hpopwgt, 0.5)), 
+                     sep = "\n") 
+                 print(summary(df %>%  
+                                   pull(disp_sqrt10))) 
+                 print(summary(df %>%  
+                                   filter(disp_sqrt > 10 * wNtile(df$dhi, df$hpopwgt, 0.5)) %>%  
+                                   pull(disp_sqrt))) 
+                 print(c("over", ccyy, df %>% 
+                           filter(disp_sqrt_med > 10) %>%  
+                           pull(disp_sqrt_med) %>%  
+                             sort())) 
+                 for (var in v) { 
+                     if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+                         cat(paste("gini", 
+                                   ccyy,  
+                                   var,  
+                                   gini(df, var), 
+                                   boot_gini_se(df, var, reps = reps), 
+                                   df$grossnet[1], 
+                                   sep = ","), sep = "\n") 
+                     } 
+                 } 
+             } 
+         } 
+     } 
+ } 
>  
> # Call 
> get_ginis("pl", reps = 500) 
[1] "Loading dataset pl86h..."
pl86h 10646 0 4422000
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0  171546  251576  280032  351824 2553043 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
                                                
[1] "over"  "pl86h"
gini,pl86h,disp_sqrt10,0,0,200
gini,pl86h,disp_sqrt,0,0,200
[1] "Loading dataset pl92h..."
pl92h 6602 0 491800000
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
        0  20635535  27872721  31798225  38338301 347755115 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
                                                
[1] "over"  "pl92h"
gini,pl92h,disp_sqrt10,0,0,200
gini,pl92h,disp_sqrt,0,0,200
[1] "Loading dataset pl95h..."
pl95h 32009 11 87560
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0    3866    5392    6174    7442   61914 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  97105  103766  109032  129282  158085  194582 
 [1] "over"  "pl95h" "11.1"  "11.3"  "11.8"  "11.9"  "12.2"  "12.5"  "14.2" 
[10] "17.1"  "19"    "19.2"  "22.2" 
gini,pl95h,disp_sqrt10,0,0,320
gini,pl95h,disp_sqrt,0,0,320
[1] "Loading dataset pl99h..."
pl99h 31428 4 178790
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0    7763   10710   12105   14509  126424 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 218079  235431  248885  462482  475936 1134081 
[1] "over"  "pl99h" "12.2"  "13.5"  "14.3"  "63.4" 
gini,pl99h,disp_sqrt10,0,0,320
gini,pl99h,disp_sqrt,0,0,320
[1] "Loading dataset pl04h..."
pl04h 32214 6 204000
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0    9334   13200   15412   18469  204000 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 212132  222665  251457  295736  323840  498332 
[1] "over"  "pl04h" "10.4"  "10.8"  "11.2"  "13.4"  "16.7"  "24.4" 
gini,pl04h,disp_sqrt10,0,0,320
gini,pl04h,disp_sqrt,0,0,320
[1] "Loading dataset pl07h..."
pl07h 37366 9 257410
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0   11558   16128   19007   22722  257410 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 308106  411636  493139  554170  585000 1026864 
 [1] "over"  "pl07h" "12"    "12.8"  "16"    "18.7"  "19.2"  "19.3"  "22.7" 
[10] "33.2"  "39.9" 
gini,pl07h,disp_sqrt10,0,0,320
gini,pl07h,disp_sqrt,0,0,320
[1] "Loading dataset pl10h..."
pl10h 37412 13 336000
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0   14768   20968   24717   29783  336000 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 337393  378682  510163  709522  803259 2309472 
 [1] "over"  "pl10h" "10.3"  "10.8"  "11.3"  "13.2"  "14"    "15.2"  "16.6" 
[10] "18.1"  "23.9"  "26"    "36.4"  "68.7" 
gini,pl10h,disp_sqrt10,0,0,320
gini,pl10h,disp_sqrt,0,0,320
[1] "Loading dataset pl13h..."
pl13h 37181 10 363100
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0   16191   23005   27038   32487  295000 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 367410  398751  441171  857161  653741 3926717 
 [1] "over"  "pl13h" "10.1"  "10.5"  "11"    "11.1"  "11.4"  "12.9"  "13.5" 
[10] "19.5"  "28"    "108.1"
gini,pl13h,disp_sqrt10,0,0,320
gini,pl13h,disp_sqrt,0,0,320
[1] "Loading dataset pl16h..."
pl16h 36886 2 426360
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0   18963   26339   30208   36402  382560 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 493920 1372376 2250831 2250831 3129287 4007742 
[1] "over"  "pl16h" "11.6"  "94"   
gini,pl16h,disp_sqrt10,0,0,320
gini,pl16h,disp_sqrt,0,0,320
> 
> proc.time()
   user  system elapsed 
106.951   1.522 111.985 


