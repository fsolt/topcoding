From: postbox@lisdatacenter.org
Subject: job 614517 co
Date: April 5, 2019 at 1:06:54 PM CDT
To: fsolt@mac.com

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> library(dplyr) 

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

>  
> ## Define functions 
> gini <- function(df, x) { 
+     df1 <- df[!is.na(df[[x]]), ] 
+     x <- as.vector(df1[[x]]) 
+     weight <- df1$wt 
+      
+     ox <- order(x) 
+     x <- as.vector(x)[ox] 
+     weight <- as.vector(weight)[ox] / sum(weight)  
+     p <- cumsum(weight) 
+     nu <- cumsum(weight * x) 
+     n <- length(nu) 
+     nu <- nu / nu[n] 
+     res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+     return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+     x <- var[order(var)] 
+     y <- wgt[order(var)] 
+     z <- cumsum(y) / sum(y) 
+     cop <- rep(NA, length(split))  
+     for (i in 1:length(cop)) { 
+         cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+     } 
+     return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+     tb <- ifelse(var < botline, botline, var) 
+     tb <- ifelse(tb > topline, topline, tb) 
+     return(tb) 
+ } 
>  
> setups <- function(df) { 
+     botline <- 0 
+     topline10 <- 10 * wNtile(df$dhi, df$hpopwgt, 0.5) 
+      
+     df$disp_sqrt10 <- topBottom(df$dhi, botline, topline10) / (df$nhhmem ^ 0.5) 
+     df$disp_sqrt <- ifelse(df$dhi < botline, botline, df$dhi) / (df$nhhmem ^ 0.5)  
+     df$disp_sqrt_med <- round(df$disp_sqrt / wNtile(df$dhi, df$hpopwgt, 0.5), 1) 
+  
+     df$market_sqrt10 <- topBottom(ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor), botline, topline10) / (df$nhhmem ^ 0.5) 
+     df$market_sqrt <- ifelse(ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor) < 0, botline, ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor)) / (df$nhhmem ^ 0.5) 
+      
+     return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+     data <- data[!is.na(data[[var]]), ] 
+     resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+     r_stat <- lapply(resamples, function(x) gini(x, var)) 
+     std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+     return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars, subset) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] %>% 
> #     filter(eval(parse(text = subset), .)) 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(funs(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+     set.seed(324) 
+     ccs <- c("au", "at", "be", "br", "ca", "cl", "cn", "co", "cz", "dk",  
+              "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is",  
+              "in", "ie", "il", "it", "jp", "lu", "lt", "mx", "nl", "no", "pa",   
+              "py", "pe", "pl", "ro", "ru", "rs", "sk", "si", "za", "kr", "es",   
+              "se", "ch", "tw", "uk", "us", "uy") 
+     cc <- tolower(cc) 
+     if (!cc %in% ccs) { 
+         stop("Please specify a LIS country in iso2c format") 
+     } 
+     last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+     yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:last_year_yy))) 
+      
+     datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+     vars <- c("dhi", "hi", "factor", "hitp", "hc", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+      
+     v <- c("disp_sqrt10", "disp_sqrt") 
+      
+     for (ccyy in datasets) { 
+         cat("") 
+         df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+         if (!class(df)[1] == "try-error") { 
+             mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+             if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+                 df <- setups(df) 
+                 cat(paste(ccyy, 
+                           nrow(df %>%  
+                                    filter(!is.na(disp_sqrt10))), 
+                           nrow(df %>%  
+                                    filter(!is.na(disp_sqrt) & disp_sqrt > 10 * wNtile(df$dhi, df$hpopwgt, 0.5))), 
+                           10 * wNtile(df$dhi, df$hpopwgt, 0.5)), 
+                     sep = "\n") 
+                 print(summary(df %>%  
+                                   pull(disp_sqrt10))) 
+                 print(summary(df %>%  
+                                   filter(disp_sqrt > 10 * wNtile(df$dhi, df$hpopwgt, 0.5)) %>%  
+                                   pull(disp_sqrt))) 
+                 print(c("over", ccyy, df %>% 
+                           filter(disp_sqrt_med > 10) %>%  
+                           pull(disp_sqrt_med) %>%  
+                             sort())) 
+                 for (var in v) { 
+                     if (grepl("hh", var)) { 
+                         df$wt <- df$hpopwgt 
+                     } else { 
+                         df$wt <- df$hpopwgt * df$nhhmem 
+                     } 
+                     if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+                         cat(paste("gini", 
+                                   ccyy,  
+                                   var,  
+                                   gini(df, var), 
+                                   boot_gini_se(df, var, reps = reps), 
+                                   df$grossnet[1], 
+                                   sep = ","), sep = "\n") 
+                     } 
+                 } 
+             } 
+         } 
+     } 
+ } 
>  
> # Call 
> get_ginis("co", reps = 500) 
[1] "Loading dataset co04h..."
co04h 8994 11 87201000
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max.     NA's 
       0  1959694  3464102  5323279  6022500 87201000     3516 
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
 96000000 106240499 121200000 175399683 174527438 547962660 
 [1] "over"  "co04h" "11"    "11.2"  "11.7"  "12.7"  "13.8"  "13.9"  "15.2" 
[10] "15.9"  "24.1"  "29"    "62.8" 
gini,co04h,disp_sqrt10,0.5269,0.0075,100
gini,co04h,disp_sqrt,0.5337,0.0077,100
[1] "Loading dataset co07h..."
co07h 15847 55 80267320
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max.     NA's 
       0  2400000  4363594  6801371  7939470 80267320     1698 
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
 81202406  94394327 113701297 139564787 149893877 416949600 
 [1] "over"  "co07h" "10.1"  "10.3"  "10.4"  "10.5"  "10.6"  "10.7"  "10.8" 
[10] "10.8"  "11"    "11.1"  "11.4"  "11.6"  "11.6"  "11.7"  "11.9"  "12"   
[19] "12.2"  "12.2"  "12.6"  "12.7"  "13.1"  "13.1"  "13.2"  "13.4"  "13.4" 
[28] "13.6"  "14"    "14.2"  "14.4"  "14.9"  "15"    "15.1"  "15.8"  "15.8" 
[37] "15.8"  "16"    "16.3"  "17.7"  "18.3"  "18.6"  "18.7"  "18.7"  "19"   
[46] "19.2"  "19.7"  "19.9"  "21"    "27.9"  "28"    "29.2"  "33"    "35.5" 
[55] "39.2"  "47.5"  "51.9" 
gini,co07h,disp_sqrt10,0.5353,0.0051,310
gini,co07h,disp_sqrt,0.5621,0.0067,310
[1] "Loading dataset co10h..."
co10h 16125 32 97672000
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max.     NA's 
       0  3139862  5393245  8161425  9434094 97672000     2501 
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
9.991e+07 1.114e+08 1.379e+08 2.894e+08 1.764e+08 2.920e+09 
 [1] "over"  "co10h" "10.2"  "10.2"  "10.5"  "10.6"  "10.8"  "10.8"  "11.2" 
[10] "11.3"  "11.4"  "12"    "12.1"  "12.2"  "12.2"  "12.6"  "13.5"  "13.7" 
[19] "14.5"  "14.8"  "15.3"  "17"    "17.4"  "17.4"  "17.8"  "17.9"  "18.6" 
[28] "18.7"  "18.9"  "18.9"  "19.4"  "22.5"  "214.3" "298.9"
gini,co10h,disp_sqrt10,0.4872,0.0051,310
gini,co10h,disp_sqrt,0.5112,0.0093,310
[1] "Loading dataset co13h..."
co13h 14050 25 133229090
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max.      NA's 
        0   3600000   6235383   9333456  10820127 133229090      4844 
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
133711721 152651411 171402684 212564457 240000000 615000000 
 [1] "over"  "co13h" "10.1"  "10.3"  "10.6"  "10.8"  "11.1"  "11.5"  "11.6" 
[10] "11.7"  "11.8"  "11.9"  "12.7"  "12.9"  "13"    "14.2"  "14.3"  "15.3" 
[19] "15.7"  "18"    "18.2"  "21"    "21"    "25.8"  "29.1"  "46.2" 
gini,co13h,disp_sqrt10,0.502,0.0063,310
gini,co13h,disp_sqrt,0.5156,0.0073,310
> 
> proc.time()
   user  system elapsed 
 26.265   0.661  27.946 


