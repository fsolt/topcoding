From: postbox@lisdatacenter.org
Subject: job 614540 lu
Date: April 5, 2019 at 1:18:26 PM CDT
To: fsolt@mac.com

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> library(dplyr) 

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

>  
> ## Define functions 
> gini <- function(df, x) { 
+     df1 <- df[!is.na(df[[x]]), ] 
+     x <- as.vector(df1[[x]]) 
+     weight <- df1$wt 
+      
+     ox <- order(x) 
+     x <- as.vector(x)[ox] 
+     weight <- as.vector(weight)[ox] / sum(weight)  
+     p <- cumsum(weight) 
+     nu <- cumsum(weight * x) 
+     n <- length(nu) 
+     nu <- nu / nu[n] 
+     res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+     return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+     x <- var[order(var)] 
+     y <- wgt[order(var)] 
+     z <- cumsum(y) / sum(y) 
+     cop <- rep(NA, length(split))  
+     for (i in 1:length(cop)) { 
+         cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+     } 
+     return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+     tb <- ifelse(var < botline, botline, var) 
+     tb <- ifelse(tb > topline, topline, tb) 
+     return(tb) 
+ } 
>  
> setups <- function(df) { 
+     botline <- 0 
+     topline10 <- 10 * wNtile(df$dhi, df$hpopwgt, 0.5) 
+      
+     df$disp_sqrt10 <- topBottom(df$dhi, botline, topline10) / (df$nhhmem ^ 0.5) 
+     df$disp_sqrt <- ifelse(df$dhi < botline, botline, df$dhi) / (df$nhhmem ^ 0.5)  
+     df$disp_sqrt_med <- round(df$disp_sqrt / wNtile(df$dhi, df$hpopwgt, 0.5), 1) 
+  
+     df$market_sqrt10 <- topBottom(ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor), botline, topline10) / (df$nhhmem ^ 0.5) 
+     df$market_sqrt <- ifelse(ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor) < 0, botline, ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor)) / (df$nhhmem ^ 0.5) 
+      
+     return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+     data <- data[!is.na(data[[var]]), ] 
+     resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+     r_stat <- lapply(resamples, function(x) gini(x, var)) 
+     std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+     return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars, subset) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] %>% 
> #     filter(eval(parse(text = subset), .)) 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(funs(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+     set.seed(324) 
+     ccs <- c("au", "at", "be", "br", "ca", "cl", "cn", "co", "cz", "dk",  
+              "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is",  
+              "in", "ie", "il", "it", "jp", "lu", "lt", "mx", "nl", "no", "pa",   
+              "py", "pe", "pl", "ro", "ru", "rs", "sk", "si", "za", "kr", "es",   
+              "se", "ch", "tw", "uk", "us", "uy") 
+     cc <- tolower(cc) 
+     if (!cc %in% ccs) { 
+         stop("Please specify a LIS country in iso2c format") 
+     } 
+     last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+     yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:last_year_yy))) 
+      
+     datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+     vars <- c("dhi", "hi", "factor", "hitp", "hc", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+      
+     v <- c("disp_sqrt10", "disp_sqrt") 
+      
+     for (ccyy in datasets) { 
+         cat("") 
+         df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+         if (!class(df)[1] == "try-error") { 
+             mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+             if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+                 df <- setups(df) 
+                 cat(paste(ccyy, 
+                           nrow(df %>%  
+                                    filter(!is.na(disp_sqrt10))), 
+                           nrow(df %>%  
+                                    filter(!is.na(disp_sqrt) & disp_sqrt > 10 * wNtile(df$dhi, df$hpopwgt, 0.5))), 
+                           10 * wNtile(df$dhi, df$hpopwgt, 0.5)), 
+                     sep = "\n") 
+                 print(summary(df %>%  
+                                   pull(disp_sqrt10))) 
+                 print(summary(df %>%  
+                                   filter(disp_sqrt > 10 * wNtile(df$dhi, df$hpopwgt, 0.5)) %>%  
+                                   pull(disp_sqrt))) 
+                 print(c("over", ccyy, df %>% 
+                           filter(disp_sqrt_med > 10) %>%  
+                           pull(disp_sqrt_med) %>%  
+                             sort())) 
+                 for (var in v) { 
+                     if (grepl("hh", var)) { 
+                         df$wt <- df$hpopwgt 
+                     } else { 
+                         df$wt <- df$hpopwgt * df$nhhmem 
+                     } 
+                     if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+                         cat(paste("gini", 
+                                   ccyy,  
+                                   var,  
+                                   gini(df, var), 
+                                   boot_gini_se(df, var, reps = reps), 
+                                   df$grossnet[1], 
+                                   sep = ","), sep = "\n") 
+                     } 
+                 } 
+             } 
+         } 
+     } 
+ } 
>  
> # Call 
> get_ginis("lu", reps = 500) 
[1] "Loading dataset lu85h..."
lu85h 2012 0 7320000
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0  372000  498670  537313  649473 2400000 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
                                                
[1] "over"  "lu85h"
gini,lu85h,disp_sqrt10,0.236,0.0045,200
gini,lu85h,disp_sqrt,0.236,0.0045,200
[1] "Loading dataset lu91h..."
lu91h 1957 0 11760000
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  50004  555600  758004  836729 1018500 6789639 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
                                                
[1] "over"  "lu91h"
gini,lu91h,disp_sqrt10,0.2386,0.0066,200
gini,lu91h,disp_sqrt,0.2388,0.0063,200
[1] "Loading dataset lu94h..."
lu94h 1813 0 13633440
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  90586  660000  872954  961642 1157520 5520000 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
                                                
[1] "over"  "lu94h"
gini,lu94h,disp_sqrt10,0.2354,0.0053,200
gini,lu94h,disp_sqrt,0.2354,0.0048,200
[1] "Loading dataset lu97h..."
lu97h 2515 0 13680480
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0  703670  945402 1071782 1292104 7284000 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
                                                
[1] "over"  "lu97h"
gini,lu97h,disp_sqrt10,0.2612,0.0049,200
gini,lu97h,disp_sqrt,0.2612,0.0051,200
[1] "Loading dataset lu00h..."
lu00h 2415 0 15600000
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
 144000  786101 1056828 1202518 1455142 7991847      16 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
                                                
[1] "over"  "lu00h"
gini,lu00h,disp_sqrt10,0.2621,0.005,200
gini,lu00h,disp_sqrt,0.2621,0.0053,200
[1] "Loading dataset lu04h..."
lu04h 3622 1 476480
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0   22730   31880   36307   44215  476480 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 482911  482911  482911  482911  482911  482911 
[1] "over"  "lu04h" "10.1" 
gini,lu04h,disp_sqrt10,0.2688,0.0056,110
gini,lu04h,disp_sqrt,0.2698,0.006,110
[1] "Loading dataset lu07h..."
lu07h 3755 2 507480
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
      0   22168   32389   38163   46269  507480      24 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 524847  647768  770689  770689  893610 1016530 
[1] "over"  "lu07h" "10.3"  "20"   
gini,lu07h,disp_sqrt10,0.2757,0.0066,100
gini,lu07h,disp_sqrt,0.277,0.0069,100
[1] "Loading dataset lu10h..."
lu10h 5452 0 542060
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
      0   25838   36290   41272   50950  306925      12 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
                                                
[1] "over"  "lu10h"
gini,lu10h,disp_sqrt10,0.2699,0.0057,100
gini,lu10h,disp_sqrt,0.271,0.0063,100
[1] "Loading dataset lu13h..."
lu13h 3873 0 554340
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
      0   28088   39667   44320   55348  386076       6 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
                                                
[1] "over"  "lu13h"
gini,lu13h,disp_sqrt10,0.2825,0.0052,100
gini,lu13h,disp_sqrt,0.2836,0.0054,100
> 
> proc.time()
   user  system elapsed 
 19.447   0.357  20.546 


