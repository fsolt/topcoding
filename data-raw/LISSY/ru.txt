From: postbox@lisdatacenter.org
Subject: job 614549 ru
Date: April 5, 2019 at 1:24:46 PM CDT
To: fsolt@mac.com

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> library(dplyr) 

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

>  
> ## Define functions 
> gini <- function(df, x) { 
+     df1 <- df[!is.na(df[[x]]), ] 
+     x <- as.vector(df1[[x]]) 
+     weight <- df1$wt 
+      
+     ox <- order(x) 
+     x <- as.vector(x)[ox] 
+     weight <- as.vector(weight)[ox] / sum(weight)  
+     p <- cumsum(weight) 
+     nu <- cumsum(weight * x) 
+     n <- length(nu) 
+     nu <- nu / nu[n] 
+     res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+     return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+     x <- var[order(var)] 
+     y <- wgt[order(var)] 
+     z <- cumsum(y) / sum(y) 
+     cop <- rep(NA, length(split))  
+     for (i in 1:length(cop)) { 
+         cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+     } 
+     return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+     tb <- ifelse(var < botline, botline, var) 
+     tb <- ifelse(tb > topline, topline, tb) 
+     return(tb) 
+ } 
>  
> setups <- function(df) { 
+     botline <- 0 
+     topline10 <- 10 * wNtile(df$dhi, df$hpopwgt, 0.5) 
+      
+     df$disp_sqrt10 <- topBottom(df$dhi, botline, topline10) / (df$nhhmem ^ 0.5) 
+     df$disp_sqrt <- ifelse(df$dhi < botline, botline, df$dhi) / (df$nhhmem ^ 0.5)  
+     df$disp_sqrt_med <- round(df$disp_sqrt / wNtile(df$dhi, df$hpopwgt, 0.5), 1) 
+  
+     df$market_sqrt10 <- topBottom(ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor), botline, topline10) / (df$nhhmem ^ 0.5) 
+     df$market_sqrt <- ifelse(ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor) < 0, botline, ifelse(!is.na(df$hitp), (df$factor + df$hitp), df$factor)) / (df$nhhmem ^ 0.5) 
+      
+     return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+     data <- data[!is.na(data[[var]]), ] 
+     resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+     r_stat <- lapply(resamples, function(x) gini(x, var)) 
+     std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+     return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars, subset) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] %>% 
> #     filter(eval(parse(text = subset), .)) 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(funs(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+     set.seed(324) 
+     ccs <- c("au", "at", "be", "br", "ca", "cl", "cn", "co", "cz", "dk",  
+              "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is",  
+              "in", "ie", "il", "it", "jp", "lu", "lt", "mx", "nl", "no", "pa",   
+              "py", "pe", "pl", "ro", "ru", "rs", "sk", "si", "za", "kr", "es",   
+              "se", "ch", "tw", "uk", "us", "uy") 
+     cc <- tolower(cc) 
+     if (!cc %in% ccs) { 
+         stop("Please specify a LIS country in iso2c format") 
+     } 
+     last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+     yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:last_year_yy))) 
+      
+     datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+     vars <- c("dhi", "hi", "factor", "hitp", "hc", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+      
+     v <- c("disp_sqrt10", "disp_sqrt") 
+      
+     for (ccyy in datasets) { 
+         cat("") 
+         df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+         if (!class(df)[1] == "try-error") { 
+             mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+             if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+                 df <- setups(df) 
+                 cat(paste(ccyy, 
+                           nrow(df %>%  
+                                    filter(!is.na(disp_sqrt10))), 
+                           nrow(df %>%  
+                                    filter(!is.na(disp_sqrt) & disp_sqrt > 10 * wNtile(df$dhi, df$hpopwgt, 0.5))), 
+                           10 * wNtile(df$dhi, df$hpopwgt, 0.5)), 
+                     sep = "\n") 
+                 print(summary(df %>%  
+                                   pull(disp_sqrt10))) 
+                 print(summary(df %>%  
+                                   filter(disp_sqrt > 10 * wNtile(df$dhi, df$hpopwgt, 0.5)) %>%  
+                                   pull(disp_sqrt))) 
+                 print(c("over", ccyy, df %>% 
+                           filter(disp_sqrt_med > 10) %>%  
+                           pull(disp_sqrt_med) %>%  
+                             sort())) 
+                 for (var in v) { 
+                     if (grepl("hh", var)) { 
+                         df$wt <- df$hpopwgt 
+                     } else { 
+                         df$wt <- df$hpopwgt * df$nhhmem 
+                     } 
+                     if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+                         cat(paste("gini", 
+                                   ccyy,  
+                                   var,  
+                                   gini(df, var), 
+                                   boot_gini_se(df, var, reps = reps), 
+                                   df$grossnet[1], 
+                                   sep = ","), sep = "\n") 
+                     } 
+                 } 
+             } 
+         } 
+     } 
+ } 
>  
> # Call 
> get_ginis("ru", reps = 500) 
[1] "Loading dataset ru00h..."
ru00h 3112 6 308440
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
      0   11012   17785   24424   29636  308440     207 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 338511  378994  521021  598633  611073 1238502 
[1] "over"  "ru00h" "11"    "11.1"  "15.7"  "18.1"  "20.4"  "40.2" 
gini,ru00h,disp_sqrt10,0.4116,0.0066,200
gini,ru00h,disp_sqrt,0.4267,0.0104,200
[1] "Loading dataset ru04h..."
ru04h 3061 1 911470
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
      0   32764   53466   69701   87420  911470     333 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
1019012 1019012 1019012 1019012 1019012 1019012 
[1] "over"  "ru04h" "11.2" 
gini,ru04h,disp_sqrt10,0.3895,0.0059,200
gini,ru04h,disp_sqrt,0.39,0.0058,200
[1] "Loading dataset ru07h..."
ru07h 3335 0 1963030
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
      0   63649  103860  126537  163763 1080000     598 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
                                                
[1] "over"  "ru07h"
gini,ru07h,disp_sqrt10,0.3485,0.0048,200
gini,ru07h,disp_sqrt,0.3485,0.005,200
[1] "Loading dataset ru10h..."
ru10h 5658 2 3051380
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
      0  121027  177600  214041  263887 2157652     665 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
3644112 4435690 5227268 5227268 6018846 6810424 
[1] "over"  "ru10h" "11.9"  "22.3" 
gini,ru10h,disp_sqrt10,0.339,0.0044,200
gini,ru10h,disp_sqrt,0.3435,0.0055,200
[1] "Loading dataset ru11h..."
ru11h 9990 1 3902190
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
    100  142621  208104  261653  318680 2472045 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
6806623 6806623 6806623 6806623 6806623 6806623 
[1] "over"  "ru11h" "17.4" 
gini,ru11h,disp_sqrt10,0.3622,0.0049,120
gini,ru11h,disp_sqrt,0.3642,0.006,120
[1] "Loading dataset ru13h..."
ru13h 45000 0 5101240
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
    635  166930  241314  296242  362870 4294817 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
                                                
[1] "over"  "ru13h"
gini,ru13h,disp_sqrt10,0.3482,0.0051,120
gini,ru13h,disp_sqrt,0.3506,0.0059,120
[1] "Loading dataset ru14h..."
ru14h 45000 0 5477840
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   1261  180001  256736  315364  381828 4335172 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
                                                
[1] "over"  "ru14h"
gini,ru14h,disp_sqrt10,0.3393,0.0039,120
gini,ru14h,disp_sqrt,0.3396,0.0043,120
[1] "Loading dataset ru15h..."
ru15h 60000 0 5990000
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
    439  188335  266415  322808  389586 4235570 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
                                                
[1] "over"  "ru15h"
gini,ru15h,disp_sqrt10,0.3308,0.0035,120
gini,ru15h,disp_sqrt,0.3309,0.0033,120
[1] "Loading dataset ru16h..."
ru16h 160008 1 6141810
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
    693  193730  271529  330348  398141 6141810 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
7532337 7532337 7532337 7532337 7532337 7532337 
[1] "over"  "ru16h" "12.3" 
gini,ru16h,disp_sqrt10,0.3305,0.0029,120
gini,ru16h,disp_sqrt,0.3315,0.0033,120
> 
> proc.time()
   user  system elapsed 
164.404   5.333 173.596 
Warning message:
system call failed: Cannot allocate memory 


